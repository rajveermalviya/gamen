//go:build linux && !android

// Code generated by internal/wayland/wl/gen; DO NOT EDIT.
// XML file : ./protocols/wayland.xml

// wayland Protocol Copyright:
// 
// Copyright © 2008-2011 Kristian Høgsberg
// Copyright © 2010-2011 Intel Corporation
// Copyright © 2012-2013 Collabora, Ltd.
// 
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice (including the
// next paragraph) shall be included in all copies or substantial
// portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef WAYLAND_CLIENT_PROTOCOL_H
#define WAYLAND_CLIENT_PROTOCOL_H
#include "wayland-util.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_proxy;

typedef int (*proc_wl_proxy_add_listener)(struct wl_proxy *proxy, void (**implementation)(void), void *data);
typedef struct wl_proxy *(*proc_wl_proxy_marshal_flags)(struct wl_proxy *proxy, uint32_t opcode, const struct wl_interface *interface, uint32_t version, uint32_t flags, ...);
typedef uint32_t (*proc_wl_proxy_get_version)(struct wl_proxy *proxy);

struct wl_buffer;
struct wl_callback;
struct wl_compositor;
struct wl_data_device;
struct wl_data_device_manager;
struct wl_data_offer;
struct wl_data_source;
struct wl_display;
struct wl_keyboard;
struct wl_output;
struct wl_pointer;
struct wl_region;
struct wl_registry;
struct wl_seat;
struct wl_shell;
struct wl_shell_surface;
struct wl_shm;
struct wl_shm_pool;
struct wl_subcompositor;
struct wl_subsurface;
struct wl_surface;
struct wl_touch;

#ifndef WL_DISPLAY_INTERFACE
#define WL_DISPLAY_INTERFACE
extern const struct wl_interface wl_display_interface;
#endif
#ifndef WL_REGISTRY_INTERFACE
#define WL_REGISTRY_INTERFACE
extern const struct wl_interface wl_registry_interface;
#endif
#ifndef WL_CALLBACK_INTERFACE
#define WL_CALLBACK_INTERFACE
extern const struct wl_interface wl_callback_interface;
#endif
#ifndef WL_COMPOSITOR_INTERFACE
#define WL_COMPOSITOR_INTERFACE
extern const struct wl_interface wl_compositor_interface;
#endif
#ifndef WL_SHM_POOL_INTERFACE
#define WL_SHM_POOL_INTERFACE
extern const struct wl_interface wl_shm_pool_interface;
#endif
#ifndef WL_SHM_INTERFACE
#define WL_SHM_INTERFACE
extern const struct wl_interface wl_shm_interface;
#endif
#ifndef WL_BUFFER_INTERFACE
#define WL_BUFFER_INTERFACE
extern const struct wl_interface wl_buffer_interface;
#endif
#ifndef WL_DATA_OFFER_INTERFACE
#define WL_DATA_OFFER_INTERFACE
extern const struct wl_interface wl_data_offer_interface;
#endif
#ifndef WL_DATA_SOURCE_INTERFACE
#define WL_DATA_SOURCE_INTERFACE
extern const struct wl_interface wl_data_source_interface;
#endif
#ifndef WL_DATA_DEVICE_INTERFACE
#define WL_DATA_DEVICE_INTERFACE
extern const struct wl_interface wl_data_device_interface;
#endif
#ifndef WL_DATA_DEVICE_MANAGER_INTERFACE
#define WL_DATA_DEVICE_MANAGER_INTERFACE
extern const struct wl_interface wl_data_device_manager_interface;
#endif
#ifndef WL_SHELL_INTERFACE
#define WL_SHELL_INTERFACE
extern const struct wl_interface wl_shell_interface;
#endif
#ifndef WL_SHELL_SURFACE_INTERFACE
#define WL_SHELL_SURFACE_INTERFACE
extern const struct wl_interface wl_shell_surface_interface;
#endif
#ifndef WL_SURFACE_INTERFACE
#define WL_SURFACE_INTERFACE
extern const struct wl_interface wl_surface_interface;
#endif
#ifndef WL_SEAT_INTERFACE
#define WL_SEAT_INTERFACE
extern const struct wl_interface wl_seat_interface;
#endif
#ifndef WL_POINTER_INTERFACE
#define WL_POINTER_INTERFACE
extern const struct wl_interface wl_pointer_interface;
#endif
#ifndef WL_KEYBOARD_INTERFACE
#define WL_KEYBOARD_INTERFACE
extern const struct wl_interface wl_keyboard_interface;
#endif
#ifndef WL_TOUCH_INTERFACE
#define WL_TOUCH_INTERFACE
extern const struct wl_interface wl_touch_interface;
#endif
#ifndef WL_OUTPUT_INTERFACE
#define WL_OUTPUT_INTERFACE
extern const struct wl_interface wl_output_interface;
#endif
#ifndef WL_REGION_INTERFACE
#define WL_REGION_INTERFACE
extern const struct wl_interface wl_region_interface;
#endif
#ifndef WL_SUBCOMPOSITOR_INTERFACE
#define WL_SUBCOMPOSITOR_INTERFACE
extern const struct wl_interface wl_subcompositor_interface;
#endif
#ifndef WL_SUBSURFACE_INTERFACE
#define WL_SUBSURFACE_INTERFACE
extern const struct wl_interface wl_subsurface_interface;
#endif

struct wl_display_listener {
	void (*error)(void *data, struct wl_display *wl_display, void *object_id, uint32_t code, const char *message);
	void (*delete_id)(void *data, struct wl_display *wl_display, uint32_t id);
};
static inline int gamen_wl_display_add_listener(void *fp, struct wl_display *wl_display, const struct wl_display_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_display, (void (**)(void)) listener, data);
}

static inline struct wl_callback *gamen_wl_display_sync(void *fp1, void *fp2, struct wl_display *wl_display) {
	struct wl_proxy *callback;
	callback = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_display, 0, &wl_callback_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_display), 0, NULL);
	return (struct wl_callback *) callback;
}

static inline struct wl_registry *gamen_wl_display_get_registry(void *fp1, void *fp2, struct wl_display *wl_display) {
	struct wl_proxy *registry;
	registry = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_display, 1, &wl_registry_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_display), 0, NULL);
	return (struct wl_registry *) registry;
}

struct wl_registry_listener {
	void (*global)(void *data, struct wl_registry *wl_registry, uint32_t name, const char *interface, uint32_t version);
	void (*global_remove)(void *data, struct wl_registry *wl_registry, uint32_t name);
};
static inline int gamen_wl_registry_add_listener(void *fp, struct wl_registry *wl_registry, const struct wl_registry_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_registry, (void (**)(void)) listener, data);
}

static inline void *gamen_wl_registry_bind(void *fp, struct wl_registry *wl_registry, uint32_t name, const struct wl_interface *interface, uint32_t version) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp)((struct wl_proxy *) wl_registry, 0, interface, version, 0, name, interface->name, version, NULL);
	return (void *) id;
}

struct wl_callback_listener {
	void (*done)(void *data, struct wl_callback *wl_callback, uint32_t callback_data);
};
static inline int gamen_wl_callback_add_listener(void *fp, struct wl_callback *wl_callback, const struct wl_callback_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_callback, (void (**)(void)) listener, data);
}

static inline struct wl_surface *gamen_wl_compositor_create_surface(void *fp1, void *fp2, struct wl_compositor *wl_compositor) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_compositor, 0, &wl_surface_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_compositor), 0, NULL);
	return (struct wl_surface *) id;
}

static inline struct wl_region *gamen_wl_compositor_create_region(void *fp1, void *fp2, struct wl_compositor *wl_compositor) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_compositor, 1, &wl_region_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_compositor), 0, NULL);
	return (struct wl_region *) id;
}

static inline struct wl_buffer *gamen_wl_shm_pool_create_buffer(void *fp1, void *fp2, struct wl_shm_pool *wl_shm_pool, int32_t offset, int32_t width, int32_t height, int32_t stride, uint32_t format) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shm_pool, 0, &wl_buffer_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shm_pool), 0, NULL, offset, width, height, stride, format);
	return (struct wl_buffer *) id;
}

static inline void gamen_wl_shm_pool_destroy(void *fp1, void *fp2, struct wl_shm_pool *wl_shm_pool) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shm_pool, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shm_pool), 1);
}

static inline void gamen_wl_shm_pool_resize(void *fp1, void *fp2, struct wl_shm_pool *wl_shm_pool, int32_t size) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shm_pool, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shm_pool), 0, size);
}

struct wl_shm_listener {
	void (*format)(void *data, struct wl_shm *wl_shm, uint32_t format);
};
static inline int gamen_wl_shm_add_listener(void *fp, struct wl_shm *wl_shm, const struct wl_shm_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_shm, (void (**)(void)) listener, data);
}

static inline struct wl_shm_pool *gamen_wl_shm_create_pool(void *fp1, void *fp2, struct wl_shm *wl_shm, int32_t fd, int32_t size) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shm, 0, &wl_shm_pool_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shm), 0, NULL, fd, size);
	return (struct wl_shm_pool *) id;
}

struct wl_buffer_listener {
	void (*release)(void *data, struct wl_buffer *wl_buffer);
};
static inline int gamen_wl_buffer_add_listener(void *fp, struct wl_buffer *wl_buffer, const struct wl_buffer_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_buffer, (void (**)(void)) listener, data);
}

static inline void gamen_wl_buffer_destroy(void *fp1, void *fp2, struct wl_buffer *wl_buffer) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_buffer, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_buffer), 1);
}

struct wl_data_offer_listener {
	void (*offer)(void *data, struct wl_data_offer *wl_data_offer, const char *mime_type);
	void (*source_actions)(void *data, struct wl_data_offer *wl_data_offer, uint32_t source_actions);
	void (*action)(void *data, struct wl_data_offer *wl_data_offer, uint32_t dnd_action);
};
static inline int gamen_wl_data_offer_add_listener(void *fp, struct wl_data_offer *wl_data_offer, const struct wl_data_offer_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_data_offer, (void (**)(void)) listener, data);
}

static inline void gamen_wl_data_offer_accept(void *fp1, void *fp2, struct wl_data_offer *wl_data_offer, uint32_t serial, const char *mime_type) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_offer, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_offer), 0, serial, mime_type);
}

static inline void gamen_wl_data_offer_receive(void *fp1, void *fp2, struct wl_data_offer *wl_data_offer, const char *mime_type, int32_t fd) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_offer, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_offer), 0, mime_type, fd);
}

static inline void gamen_wl_data_offer_destroy(void *fp1, void *fp2, struct wl_data_offer *wl_data_offer) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_offer, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_offer), 1);
}

static inline void gamen_wl_data_offer_finish(void *fp1, void *fp2, struct wl_data_offer *wl_data_offer) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_offer, 3, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_offer), 0);
}

static inline void gamen_wl_data_offer_set_actions(void *fp1, void *fp2, struct wl_data_offer *wl_data_offer, uint32_t dnd_actions, uint32_t preferred_action) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_offer, 4, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_offer), 0, dnd_actions, preferred_action);
}

struct wl_data_source_listener {
	void (*target)(void *data, struct wl_data_source *wl_data_source, const char *mime_type);
	void (*send)(void *data, struct wl_data_source *wl_data_source, const char *mime_type, int32_t fd);
	void (*cancelled)(void *data, struct wl_data_source *wl_data_source);
	void (*dnd_drop_performed)(void *data, struct wl_data_source *wl_data_source);
	void (*dnd_finished)(void *data, struct wl_data_source *wl_data_source);
	void (*action)(void *data, struct wl_data_source *wl_data_source, uint32_t dnd_action);
};
static inline int gamen_wl_data_source_add_listener(void *fp, struct wl_data_source *wl_data_source, const struct wl_data_source_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_data_source, (void (**)(void)) listener, data);
}

static inline void gamen_wl_data_source_offer(void *fp1, void *fp2, struct wl_data_source *wl_data_source, const char *mime_type) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_source, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_source), 0, mime_type);
}

static inline void gamen_wl_data_source_destroy(void *fp1, void *fp2, struct wl_data_source *wl_data_source) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_source, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_source), 1);
}

static inline void gamen_wl_data_source_set_actions(void *fp1, void *fp2, struct wl_data_source *wl_data_source, uint32_t dnd_actions) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_source, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_source), 0, dnd_actions);
}

struct wl_data_device_listener {
	void (*data_offer)(void *data, struct wl_data_device *wl_data_device, struct wl_data_offer *id);
	void (*enter)(void *data, struct wl_data_device *wl_data_device, uint32_t serial, struct wl_surface *surface, wl_fixed_t x, wl_fixed_t y, struct wl_data_offer *id);
	void (*leave)(void *data, struct wl_data_device *wl_data_device);
	void (*motion)(void *data, struct wl_data_device *wl_data_device, uint32_t time, wl_fixed_t x, wl_fixed_t y);
	void (*drop)(void *data, struct wl_data_device *wl_data_device);
	void (*selection)(void *data, struct wl_data_device *wl_data_device, struct wl_data_offer *id);
};
static inline int gamen_wl_data_device_add_listener(void *fp, struct wl_data_device *wl_data_device, const struct wl_data_device_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_data_device, (void (**)(void)) listener, data);
}

static inline void gamen_wl_data_device_start_drag(void *fp1, void *fp2, struct wl_data_device *wl_data_device, struct wl_data_source *source, struct wl_surface *origin, struct wl_surface *icon, uint32_t serial) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_device, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_device), 0, source, origin, icon, serial);
}

static inline void gamen_wl_data_device_set_selection(void *fp1, void *fp2, struct wl_data_device *wl_data_device, struct wl_data_source *source, uint32_t serial) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_device, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_device), 0, source, serial);
}

static inline void gamen_wl_data_device_release(void *fp1, void *fp2, struct wl_data_device *wl_data_device) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_device, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_device), 1);
}

static inline struct wl_data_source *gamen_wl_data_device_manager_create_data_source(void *fp1, void *fp2, struct wl_data_device_manager *wl_data_device_manager) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_device_manager, 0, &wl_data_source_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_device_manager), 0, NULL);
	return (struct wl_data_source *) id;
}

static inline struct wl_data_device *gamen_wl_data_device_manager_get_data_device(void *fp1, void *fp2, struct wl_data_device_manager *wl_data_device_manager, struct wl_seat *seat) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_data_device_manager, 1, &wl_data_device_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_data_device_manager), 0, NULL, seat);
	return (struct wl_data_device *) id;
}

static inline struct wl_shell_surface *gamen_wl_shell_get_shell_surface(void *fp1, void *fp2, struct wl_shell *wl_shell, struct wl_surface *surface) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell, 0, &wl_shell_surface_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell), 0, NULL, surface);
	return (struct wl_shell_surface *) id;
}

struct wl_shell_surface_listener {
	void (*ping)(void *data, struct wl_shell_surface *wl_shell_surface, uint32_t serial);
	void (*configure)(void *data, struct wl_shell_surface *wl_shell_surface, uint32_t edges, int32_t width, int32_t height);
	void (*popup_done)(void *data, struct wl_shell_surface *wl_shell_surface);
};
static inline int gamen_wl_shell_surface_add_listener(void *fp, struct wl_shell_surface *wl_shell_surface, const struct wl_shell_surface_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_shell_surface, (void (**)(void)) listener, data);
}

static inline void gamen_wl_shell_surface_pong(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, uint32_t serial) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, serial);
}

static inline void gamen_wl_shell_surface_move(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, struct wl_seat *seat, uint32_t serial) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, seat, serial);
}

static inline void gamen_wl_shell_surface_resize(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, struct wl_seat *seat, uint32_t serial, uint32_t edges) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, seat, serial, edges);
}

static inline void gamen_wl_shell_surface_set_toplevel(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 3, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0);
}

static inline void gamen_wl_shell_surface_set_transient(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, struct wl_surface *parent, int32_t x, int32_t y, uint32_t flags) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 4, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, parent, x, y, flags);
}

static inline void gamen_wl_shell_surface_set_fullscreen(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, uint32_t method, uint32_t framerate, struct wl_output *output) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 5, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, method, framerate, output);
}

static inline void gamen_wl_shell_surface_set_popup(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, struct wl_seat *seat, uint32_t serial, struct wl_surface *parent, int32_t x, int32_t y, uint32_t flags) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 6, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, seat, serial, parent, x, y, flags);
}

static inline void gamen_wl_shell_surface_set_maximized(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, struct wl_output *output) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 7, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, output);
}

static inline void gamen_wl_shell_surface_set_title(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, const char *title) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 8, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, title);
}

static inline void gamen_wl_shell_surface_set_class(void *fp1, void *fp2, struct wl_shell_surface *wl_shell_surface, const char *class_) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_shell_surface, 9, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_shell_surface), 0, class_);
}

struct wl_surface_listener {
	void (*enter)(void *data, struct wl_surface *wl_surface, struct wl_output *output);
	void (*leave)(void *data, struct wl_surface *wl_surface, struct wl_output *output);
};
static inline int gamen_wl_surface_add_listener(void *fp, struct wl_surface *wl_surface, const struct wl_surface_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_surface, (void (**)(void)) listener, data);
}

static inline void gamen_wl_surface_destroy(void *fp1, void *fp2, struct wl_surface *wl_surface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 1);
}

static inline void gamen_wl_surface_attach(void *fp1, void *fp2, struct wl_surface *wl_surface, struct wl_buffer *buffer, int32_t x, int32_t y) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, buffer, x, y);
}

static inline void gamen_wl_surface_damage(void *fp1, void *fp2, struct wl_surface *wl_surface, int32_t x, int32_t y, int32_t width, int32_t height) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, x, y, width, height);
}

static inline struct wl_callback *gamen_wl_surface_frame(void *fp1, void *fp2, struct wl_surface *wl_surface) {
	struct wl_proxy *callback;
	callback = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 3, &wl_callback_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, NULL);
	return (struct wl_callback *) callback;
}

static inline void gamen_wl_surface_set_opaque_region(void *fp1, void *fp2, struct wl_surface *wl_surface, struct wl_region *region) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 4, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, region);
}

static inline void gamen_wl_surface_set_input_region(void *fp1, void *fp2, struct wl_surface *wl_surface, struct wl_region *region) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 5, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, region);
}

static inline void gamen_wl_surface_commit(void *fp1, void *fp2, struct wl_surface *wl_surface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 6, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0);
}

static inline void gamen_wl_surface_set_buffer_transform(void *fp1, void *fp2, struct wl_surface *wl_surface, int32_t transform) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 7, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, transform);
}

static inline void gamen_wl_surface_set_buffer_scale(void *fp1, void *fp2, struct wl_surface *wl_surface, int32_t scale) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 8, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, scale);
}

static inline void gamen_wl_surface_damage_buffer(void *fp1, void *fp2, struct wl_surface *wl_surface, int32_t x, int32_t y, int32_t width, int32_t height) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 9, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, x, y, width, height);
}

static inline void gamen_wl_surface_offset(void *fp1, void *fp2, struct wl_surface *wl_surface, int32_t x, int32_t y) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_surface, 10, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_surface), 0, x, y);
}

struct wl_seat_listener {
	void (*capabilities)(void *data, struct wl_seat *wl_seat, uint32_t capabilities);
	void (*name)(void *data, struct wl_seat *wl_seat, const char *name);
};
static inline int gamen_wl_seat_add_listener(void *fp, struct wl_seat *wl_seat, const struct wl_seat_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_seat, (void (**)(void)) listener, data);
}

static inline struct wl_pointer *gamen_wl_seat_get_pointer(void *fp1, void *fp2, struct wl_seat *wl_seat) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_seat, 0, &wl_pointer_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_seat), 0, NULL);
	return (struct wl_pointer *) id;
}

static inline struct wl_keyboard *gamen_wl_seat_get_keyboard(void *fp1, void *fp2, struct wl_seat *wl_seat) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_seat, 1, &wl_keyboard_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_seat), 0, NULL);
	return (struct wl_keyboard *) id;
}

static inline struct wl_touch *gamen_wl_seat_get_touch(void *fp1, void *fp2, struct wl_seat *wl_seat) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_seat, 2, &wl_touch_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_seat), 0, NULL);
	return (struct wl_touch *) id;
}

static inline void gamen_wl_seat_release(void *fp1, void *fp2, struct wl_seat *wl_seat) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_seat, 3, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_seat), 1);
}

struct wl_pointer_listener {
	void (*enter)(void *data, struct wl_pointer *wl_pointer, uint32_t serial, struct wl_surface *surface, wl_fixed_t surface_x, wl_fixed_t surface_y);
	void (*leave)(void *data, struct wl_pointer *wl_pointer, uint32_t serial, struct wl_surface *surface);
	void (*motion)(void *data, struct wl_pointer *wl_pointer, uint32_t time, wl_fixed_t surface_x, wl_fixed_t surface_y);
	void (*button)(void *data, struct wl_pointer *wl_pointer, uint32_t serial, uint32_t time, uint32_t button, uint32_t state);
	void (*axis)(void *data, struct wl_pointer *wl_pointer, uint32_t time, uint32_t axis, wl_fixed_t value);
	void (*frame)(void *data, struct wl_pointer *wl_pointer);
	void (*axis_source)(void *data, struct wl_pointer *wl_pointer, uint32_t axis_source);
	void (*axis_stop)(void *data, struct wl_pointer *wl_pointer, uint32_t time, uint32_t axis);
	void (*axis_discrete)(void *data, struct wl_pointer *wl_pointer, uint32_t axis, int32_t discrete);
	void (*axis_value120)(void *data, struct wl_pointer *wl_pointer, uint32_t axis, int32_t value120);
};
static inline int gamen_wl_pointer_add_listener(void *fp, struct wl_pointer *wl_pointer, const struct wl_pointer_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_pointer, (void (**)(void)) listener, data);
}

static inline void gamen_wl_pointer_set_cursor(void *fp1, void *fp2, struct wl_pointer *wl_pointer, uint32_t serial, struct wl_surface *surface, int32_t hotspot_x, int32_t hotspot_y) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_pointer, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_pointer), 0, serial, surface, hotspot_x, hotspot_y);
}

static inline void gamen_wl_pointer_release(void *fp1, void *fp2, struct wl_pointer *wl_pointer) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_pointer, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_pointer), 1);
}

struct wl_keyboard_listener {
	void (*keymap)(void *data, struct wl_keyboard *wl_keyboard, uint32_t format, int32_t fd, uint32_t size);
	void (*enter)(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial, struct wl_surface *surface, struct wl_array *keys);
	void (*leave)(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial, struct wl_surface *surface);
	void (*key)(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial, uint32_t time, uint32_t key, uint32_t state);
	void (*modifiers)(void *data, struct wl_keyboard *wl_keyboard, uint32_t serial, uint32_t mods_depressed, uint32_t mods_latched, uint32_t mods_locked, uint32_t group);
	void (*repeat_info)(void *data, struct wl_keyboard *wl_keyboard, int32_t rate, int32_t delay);
};
static inline int gamen_wl_keyboard_add_listener(void *fp, struct wl_keyboard *wl_keyboard, const struct wl_keyboard_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_keyboard, (void (**)(void)) listener, data);
}

static inline void gamen_wl_keyboard_release(void *fp1, void *fp2, struct wl_keyboard *wl_keyboard) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_keyboard, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_keyboard), 1);
}

struct wl_touch_listener {
	void (*down)(void *data, struct wl_touch *wl_touch, uint32_t serial, uint32_t time, struct wl_surface *surface, int32_t id, wl_fixed_t x, wl_fixed_t y);
	void (*up)(void *data, struct wl_touch *wl_touch, uint32_t serial, uint32_t time, int32_t id);
	void (*motion)(void *data, struct wl_touch *wl_touch, uint32_t time, int32_t id, wl_fixed_t x, wl_fixed_t y);
	void (*frame)(void *data, struct wl_touch *wl_touch);
	void (*cancel)(void *data, struct wl_touch *wl_touch);
	void (*shape)(void *data, struct wl_touch *wl_touch, int32_t id, wl_fixed_t major, wl_fixed_t minor);
	void (*orientation)(void *data, struct wl_touch *wl_touch, int32_t id, wl_fixed_t orientation);
};
static inline int gamen_wl_touch_add_listener(void *fp, struct wl_touch *wl_touch, const struct wl_touch_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_touch, (void (**)(void)) listener, data);
}

static inline void gamen_wl_touch_release(void *fp1, void *fp2, struct wl_touch *wl_touch) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_touch, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_touch), 1);
}

struct wl_output_listener {
	void (*geometry)(void *data, struct wl_output *wl_output, int32_t x, int32_t y, int32_t physical_width, int32_t physical_height, int32_t subpixel, const char *make, const char *model, int32_t transform);
	void (*mode)(void *data, struct wl_output *wl_output, uint32_t flags, int32_t width, int32_t height, int32_t refresh);
	void (*done)(void *data, struct wl_output *wl_output);
	void (*scale)(void *data, struct wl_output *wl_output, int32_t factor);
	void (*name)(void *data, struct wl_output *wl_output, const char *name);
	void (*description)(void *data, struct wl_output *wl_output, const char *description);
};
static inline int gamen_wl_output_add_listener(void *fp, struct wl_output *wl_output, const struct wl_output_listener *listener, void *data) {
	return ((proc_wl_proxy_add_listener)fp)((struct wl_proxy *) wl_output, (void (**)(void)) listener, data);
}

static inline void gamen_wl_output_release(void *fp1, void *fp2, struct wl_output *wl_output) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_output, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_output), 1);
}

static inline void gamen_wl_region_destroy(void *fp1, void *fp2, struct wl_region *wl_region) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_region, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_region), 1);
}

static inline void gamen_wl_region_add(void *fp1, void *fp2, struct wl_region *wl_region, int32_t x, int32_t y, int32_t width, int32_t height) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_region, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_region), 0, x, y, width, height);
}

static inline void gamen_wl_region_subtract(void *fp1, void *fp2, struct wl_region *wl_region, int32_t x, int32_t y, int32_t width, int32_t height) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_region, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_region), 0, x, y, width, height);
}

static inline void gamen_wl_subcompositor_destroy(void *fp1, void *fp2, struct wl_subcompositor *wl_subcompositor) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subcompositor, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subcompositor), 1);
}

static inline struct wl_subsurface *gamen_wl_subcompositor_get_subsurface(void *fp1, void *fp2, struct wl_subcompositor *wl_subcompositor, struct wl_surface *surface, struct wl_surface *parent) {
	struct wl_proxy *id;
	id = ((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subcompositor, 1, &wl_subsurface_interface, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subcompositor), 0, NULL, surface, parent);
	return (struct wl_subsurface *) id;
}

static inline void gamen_wl_subsurface_destroy(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 0, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 1);
}

static inline void gamen_wl_subsurface_set_position(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface, int32_t x, int32_t y) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 1, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 0, x, y);
}

static inline void gamen_wl_subsurface_place_above(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface, struct wl_surface *sibling) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 2, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 0, sibling);
}

static inline void gamen_wl_subsurface_place_below(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface, struct wl_surface *sibling) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 3, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 0, sibling);
}

static inline void gamen_wl_subsurface_set_sync(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 4, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 0);
}

static inline void gamen_wl_subsurface_set_desync(void *fp1, void *fp2, struct wl_subsurface *wl_subsurface) {
	((proc_wl_proxy_marshal_flags)fp1)((struct wl_proxy *) wl_subsurface, 5, NULL, ((proc_wl_proxy_get_version)fp2)((struct wl_proxy *) wl_subsurface), 0);
}


#ifdef __cplusplus
}
#endif


#endif
